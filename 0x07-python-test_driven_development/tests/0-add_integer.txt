===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer()`` returns the addition of its two argument. For numbers,
that value is equivalent to using the ``+`` operator.

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(3, 4)
    7

::
    >>> add_integer(-1, 4)
    3

The function also works with floating-point values

::
    >>> add_integer(3.1, 1.0)
    2

::
    >>> add_integer(-5.4, 3)
    -2

The second argument is optional, by default it is 98.

::
    >>> add_integer(5)
    103

Non-numbers
===========

``add_integer()`` requires that both arguments be either integers or floats,
if either argument are non-integer, a TypeError is raised:

::
    >>> add_integer("Hey", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(7.0, "name")
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers then the TypeError for only the 
first argument is printed

::
    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::
    >>> add_integer(float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Same thing with NaN numbers.

::
    >>> add_integer(3, float("nan"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer