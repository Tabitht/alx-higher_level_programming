============================
How to use 100-matrix_mul.py
============================

This module defines a multiplication matrix function ``matrix_mul(m_a, m_b)``.

=====
Usage
=====

The function ``matrix_mul(m_a, m_b)`` multiplies two matrices of lists of lists containing integers or float numbers.

::
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul
	>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[7, 10], [15, 22]]

::
	>>> print(matrix_mul([[1,2]], [[3, 4], [5, 6]]))
	[[13, 16]]

Your lists of lists can contain floats

::
	>>> print(matrix_mul([[1.5, 2.0], [1, 5]], [[1.0, 2.5], [1, 3.5]]))
	[[3.5, 10.75], [6.0, 20.0]]


=============
Invalid Usage
=============
when m_a or m_b is not a list, a TypeError is raised

::
	>>> print(matrix_mul("Hello", [[2, 4], [3, 1]]))
	Traceback (most recent call last):
	TypeError: m_a must be a list

::
	>>> print(matrix_mul([[2, 4], [3, 1]], "Blue"))
	Traceback (most recent call last):
	TypeError: m_b must be a list

If m_a or m_b is not a list of lists then a type error is raised

::
	>>> print(matrix_mul([1, 2, 3], [[1, 2], [2, 3]]))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

::
	>>> print(matrix_mul([[3, 2], [1, 2]], [1, 5]))
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

If m_a or m_b is empty then a ValueError is raised

::
	>>> print(matrix_mul([[]], [[1, 2]]))
	Traceback (most recent call last):
	ValueError: m_a can't be empty

::
	>>> print(matrix_mul([[1, 2]], [[]]))
	Traceback (most recent call last):
	ValueError: m_b can't be empty

If one of the elements of the list of lists in m_a or m_b is not an integer or a float, a TypeError is raised

::
	>>> print(matrix_mul([[1, 'a'], ['b', 5]], [[1, 2], [2, 4]]))
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

::
	>>> print(matrix_mul([[1, 2], [2, 3]], [[1, 'a'], ['b', 5]]))
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

If m_a or m_b is not a rectangle i.e each row of the matrix must be the same size then a TypeError is raised

::
	>>> print(matrix_mul([[1, 2], [1, 2, 3]], [[1, 2]]))
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

::
	>>> print(matrix_mul([[1, 2]], [[1, 2, 3], [1, 2]]))
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

If m_a and m_b canâ€™t be multiplied a ValueError is raised

::
	>>> print(matrix_mul([[1, 2]], [[1, 2, 3], [2, 3, 4], [3, 4, 5]]))
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied

A minimum of two arguments must be used else a TypeError is raised

::
	>>> print(matrix_mul()) #doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

::
	>>> print(matrix_mul([[1, 2]])) #doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

